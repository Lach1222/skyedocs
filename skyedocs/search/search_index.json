{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Skye ? Skye is an Interest Free payment solution helps you grow sales by providing your customers with time to repay, while you get paid immediately. Card Features Skye is integrated online. 90 days breathing space 90 days Interest Free and no repayments on every card purchase No foreign transaction fees No foreign transaction fees for online and overseas purchases SkyePlans Convert card purchases of $250 or more to a 9, 12, or 15 month Interest Free Instalment Plan ( SkyePlan ) for a small establishment fee Fees, charges, terms, conditions and lending criteria apply.","title":"Home"},{"location":"#what-is-skye","text":"Skye is an Interest Free payment solution helps you grow sales by providing your customers with time to repay, while you get paid immediately.","title":"What is Skye?"},{"location":"#card-features","text":"Skye is integrated online. 90 days breathing space 90 days Interest Free and no repayments on every card purchase No foreign transaction fees No foreign transaction fees for online and overseas purchases SkyePlans Convert card purchases of $250 or more to a 9, 12, or 15 month Interest Free Instalment Plan ( SkyePlan ) for a small establishment fee","title":"Card Features"},{"location":"best_practice_integration/","text":"Best Practice Integration Convert more browsers into shoppers Showcase Skye To ensure you get maximum benefit from Skye on your website we recommend you integrate Skye with your customer journey, letting customers they can get what they want today and pay it off over time, Interest Free. As we\u2019re a licensed and regulated credit provider we both have to adhere to compliance guidelines for all Skye advertising. As such we recommend that you use our library of assets on Skye Tools rather than spending time creating your own. If your brand requires you to do so then please make sure you send them through to us so we can sign them off before anything goes live. The below assets are available via our integration guides. Home page banner and footer Let your customers know you accept Skye . Banners are available here . Example: * The Skye payment tile is available here . Product page widgets Add Skye messaging as close as you can to the price of the item. The Skye pricing widget is tailored to the price of the item on your website. Sample product page. Magnified view Items < $1000 Items > $1000 Widgets are available here . More info pop up widget Ensure you enable to fully responsive humm pop-up on the product page call to action. This allows buyers to learn more about humm without interrupting their checkout experience. Triggered from \"More Info\" on: Product page Cart page Checkout page Pop up widget on mobile Pop up widget on desktop - Items < $2,000 Pop up widget on desktop - Items > $2,000 Widgets are available here . Cart widget Remind customers of the benefits of paying with humm at the Cart Page Magnified view Items < $1000 Items > $1000 Widgets are available here . Check out widget This is your last chance to let your customers know they have the option to pay in slices with humm. Magnified view Checkout < $1000 Checkout > $1000 Widgets are available here . Skye as payment option Skye can be integrated as a payment option in your E-commerce. New Customer Your browser does not support the video tag. Existing Customer Your browser does not support the video tag. The following plugins are available: WooCommerce Magento 1 OpenCart 3 For custom integration please refer to the developer resources . IMPORTANT Artwork approval For materials you customise or create, please send a copy to advertapproval.cards@flexigroup.com.au for review and approval before publication. Turnaround time is generally 5 working days for each round of submitted material. >> Get approval < <","title":"Best Practice Integration"},{"location":"best_practice_integration/#best-practice-integration","text":"","title":"Best Practice Integration"},{"location":"best_practice_integration/#showcase-skye","text":"To ensure you get maximum benefit from Skye on your website we recommend you integrate Skye with your customer journey, letting customers they can get what they want today and pay it off over time, Interest Free. As we\u2019re a licensed and regulated credit provider we both have to adhere to compliance guidelines for all Skye advertising. As such we recommend that you use our library of assets on Skye Tools rather than spending time creating your own. If your brand requires you to do so then please make sure you send them through to us so we can sign them off before anything goes live. The below assets are available via our integration guides.","title":"Showcase Skye"},{"location":"best_practice_integration/#home-page-banner-and-footer","text":"Let your customers know you accept Skye . Banners are available here . Example: * The Skye payment tile is available here .","title":"Home page banner and footer"},{"location":"best_practice_integration/#product-page-widgets","text":"Add Skye messaging as close as you can to the price of the item. The Skye pricing widget is tailored to the price of the item on your website. Sample product page. Magnified view Items < $1000 Items > $1000 Widgets are available here .","title":"Product page widgets"},{"location":"best_practice_integration/#more-info-pop-up-widget","text":"Ensure you enable to fully responsive humm pop-up on the product page call to action. This allows buyers to learn more about humm without interrupting their checkout experience. Triggered from \"More Info\" on: Product page Cart page Checkout page Pop up widget on mobile Pop up widget on desktop - Items < $2,000 Pop up widget on desktop - Items > $2,000 Widgets are available here .","title":"More info pop up widget"},{"location":"best_practice_integration/#cart-widget","text":"Remind customers of the benefits of paying with humm at the Cart Page Magnified view Items < $1000 Items > $1000 Widgets are available here .","title":"Cart widget"},{"location":"best_practice_integration/#check-out-widget","text":"This is your last chance to let your customers know they have the option to pay in slices with humm. Magnified view Checkout < $1000 Checkout > $1000 Widgets are available here .","title":"Check out widget"},{"location":"best_practice_integration/#skye-as-payment-option","text":"Skye can be integrated as a payment option in your E-commerce. New Customer Your browser does not support the video tag. Existing Customer Your browser does not support the video tag. The following plugins are available: WooCommerce Magento 1 OpenCart 3 For custom integration please refer to the developer resources .","title":"Skye as payment option"},{"location":"accreditation/declines_and_approvals/","text":"Accepted Numbers Due to PCI DSS compliance, to perform a test transaction within humm 's sandbox environment, you will need to use one of the following credit card numbers. Type PAN Countries Available AU Result NZ Result VISA 4242 4242 4242 4242 AU, NZ Always approves Always approves VISA 4111 1111 1111 1111 AU Only Always approves N/A VISA 4564 8099 9999 9992 AU, NZ Always approves Dynamic see below VISA 4564 4564 4564 4564 AU, NZ Always approves Dynamic see below MASTERCARD 5506 7500 0000 4364 AU, NZ Always approves Always approves MASTERCARD 5430 4899 9999 9992 AU, NZ Always approves Dynamic see below MASTERCARD 5537 5010 1010 9112 AU, NZ Always approves Dynamic see below CVV Values and Outcomes Humm 's sandbox environment allows Credit Cards to dynamically return different results. This is done using CVV values that are used to force certain test outcomes, particularly declines and approvals. Only a CVV value of 200 will generate a declined; all other values will result in an approval. CVV Code Humm Response Code 200 Declined Other values Approved","title":"Declines and approvals"},{"location":"accreditation/declines_and_approvals/#accepted-numbers","text":"Due to PCI DSS compliance, to perform a test transaction within humm 's sandbox environment, you will need to use one of the following credit card numbers. Type PAN Countries Available AU Result NZ Result VISA 4242 4242 4242 4242 AU, NZ Always approves Always approves VISA 4111 1111 1111 1111 AU Only Always approves N/A VISA 4564 8099 9999 9992 AU, NZ Always approves Dynamic see below VISA 4564 4564 4564 4564 AU, NZ Always approves Dynamic see below MASTERCARD 5506 7500 0000 4364 AU, NZ Always approves Always approves MASTERCARD 5430 4899 9999 9992 AU, NZ Always approves Dynamic see below MASTERCARD 5537 5010 1010 9112 AU, NZ Always approves Dynamic see below","title":"Accepted Numbers"},{"location":"accreditation/declines_and_approvals/#cvv-values-and-outcomes","text":"Humm 's sandbox environment allows Credit Cards to dynamically return different results. This is done using CVV values that are used to force certain test outcomes, particularly declines and approvals. Only a CVV value of 200 will generate a declined; all other values will result in an approval. CVV Code Humm Response Code 200 Declined Other values Approved","title":"CVV Values and Outcomes"},{"location":"accreditation/test/","text":"Test Transactions The following instructions outline how to perform a test transaction with humm. Test mode must be activated in the humm settings before proceeding. Performing a Test Transaction 1 - Add a product to your cart and proceed to check out with humm . The URL you redirect to should be integration- cart.%domain% 2 - Sign up for a test humm account. Only test accounts will be able to sign in. Preexisting live accounts will not work. Please ensure your mobile number is correct as you will need to receive a verification code. All other registration information used during signup may be dummy values. If you can't sign up please contact pit@%domain% 3 - Pay the first installment using a testing credit card Use the credit card number 4111 1111 1111 1111 with any name and valid expiry date. 4 - Your transaction will be approved or declined and you will be redirected back to the web-store. 5 - Confirm that the transaction is showing up correctly in the sales records for your store.","title":"Test"},{"location":"accreditation/test/#test-transactions","text":"The following instructions outline how to perform a test transaction with humm. Test mode must be activated in the humm settings before proceeding.","title":"Test Transactions"},{"location":"accreditation/test/#performing-a-test-transaction","text":"1 - Add a product to your cart and proceed to check out with humm . The URL you redirect to should be integration- cart.%domain% 2 - Sign up for a test humm account. Only test accounts will be able to sign in. Preexisting live accounts will not work. Please ensure your mobile number is correct as you will need to receive a verification code. All other registration information used during signup may be dummy values. If you can't sign up please contact pit@%domain% 3 - Pay the first installment using a testing credit card Use the credit card number 4111 1111 1111 1111 with any name and valid expiry date. 4 - Your transaction will be approved or declined and you will be redirected back to the web-store. 5 - Confirm that the transaction is showing up correctly in the sales records for your store.","title":"Performing a Test Transaction"},{"location":"developer_resources/checkout_process/","text":"Checkout Process The image below provides an overview of the interaction between merchant platform and the Skye Web service Step 1 : The customer places an order in a shopping cart providing details such as their first/last name, email address etc. The customer chooses Skye as the payment method. When the user clicks submit, the Skye web service BeginIPLTransaction is called. Step 2 : Skye web service BeginIPLTransaction returns the TransactionId. Redirect the customer to Skye apply url and append the merchant Id and the returned transactionId as parameter. Step 3 : Skye will redirect to the provided merchant url(ReturnApprovedUrl, ReturnDeclineUrl , ReturnWithdrawUrl or ReturnReferUrl) from Step 1 once a decision has been made. Step 4 : Call web service GetIPLTransactionStatus to confirm status of transaction. Step 5 : If status is APPROVED , call web service CommitIPLTransaction to finalise transaction in Skye and also update order as completed on merchant platfrom. Otherwise, update to the appropriate status.","title":"Checkout Process"},{"location":"developer_resources/checkout_process/#checkout-process","text":"The image below provides an overview of the interaction between merchant platform and the Skye Web service Step 1 : The customer places an order in a shopping cart providing details such as their first/last name, email address etc. The customer chooses Skye as the payment method. When the user clicks submit, the Skye web service BeginIPLTransaction is called. Step 2 : Skye web service BeginIPLTransaction returns the TransactionId. Redirect the customer to Skye apply url and append the merchant Id and the returned transactionId as parameter. Step 3 : Skye will redirect to the provided merchant url(ReturnApprovedUrl, ReturnDeclineUrl , ReturnWithdrawUrl or ReturnReferUrl) from Step 1 once a decision has been made. Step 4 : Call web service GetIPLTransactionStatus to confirm status of transaction. Step 5 : If status is APPROVED , call web service CommitIPLTransaction to finalise transaction in Skye and also update order as completed on merchant platfrom. Otherwise, update to the appropriate status.","title":"Checkout Process"},{"location":"developer_resources/checkout_web_service/","text":"Checkout web services The primary purpose of the Skye web service is to expose key functionalities of the Skye system to merchants. Using the Skye web service merchants can initiate, retrieve, confirm and cancel their customer\u2019s Skye transactions. The Skye web services are only accessible by registered merchants. To be able to call the web services, you need to have the following: Merchant Id Secret Key Operator Id Password Product Code There are 4 main methods available in the Skye Web Service: BeginIPLTransaction This method is used to confirm, the connectivity, pass information about the applying applicant and initiate a new online credit transaction. Method Inputs Parameter Description Data Type TransactionInformation Required This parameter contains all the information to be passed to the Skye system. Such as the applicant\u2019s name and merchant site return URL. TransactionData SecretKey Required This parameter contains a secret key that will be provided by Skye IT and will need to be passed to get a transaction ID from the Skye Systems String Method Output If this method successfully runs (no exceptions are passed to your system), a string value containing the unique transaction ID will be returned. This ID is used for all future method calls relating to this Skye transaction. Method Specification The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=BeginIPLTransaction GetIPLTransactionStatus This method is used to query the status of the transaction for a given transaction ID (given to you when you call BeginIPLTransaction). Method Inputs Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String Method Output This method will return a string value of the current status of this transaction. Method Specification The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=GetIPLTransactionStatus CommitIPLTransaction This method is used to commit the transaction upon final confirmation of the order by the customer. Method Inputs Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String Method Output This method will return a Boolean value of true if the commit succeeded or false if it failed. If a transaction isn't committed successfully, it will be withdrawn automatically. Method Specification The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=CommitIPLTransaction GetIPLTransaction This is an optional method which can be used to return all the information passed through to the Skye system (including the Skye Application ID). Method Inputs Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String Method Output This method will return a TransactionData object of the current Skye transaction, which contains all the information that was passed in the BeginIPLTransaction method call. Method Specification The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=GetIPLTransaction TransactionData Object Type The TransactionData object is a complex object type that is passed to the BeginIPLTransaction method in order to load applicant details and information about the merchant. This object contains the following values, most of these are optional (with different requirements for different products), though if customer details are available they will be automatically used in the Skye screens to make the application process easier for the customer: Name Description Valdiation Required? MerchantId The merchant id that has been provided to you by Skye. Yes OperatorId Operator ID that has been provided to you by Skye. Yes Password Password that has been provided to you by Skye. NB: DO NOT PASS THE ENCRYPTED PASSWORD, that is only used for the redirect. Yes CreditProduct Yes Offer One of the Valid Offer ID\u2019s provided to you by Skye Yes OrderNumber The merchant\u2019s identifier for this application No Description The description of the transaction Not used yet No Amount The amount of the transaction A numeric value above the agreed minimum, and below the agreed maximum (a range of 500 to 6000 is normal, but can be extended). Yes ExistingCustomer Existing customer flag to indicate if the applicant is a returning customer of the retailer. Boolean Yes Title The salutation of the applicant. Must be one of the following values: Mr, Miss, Ms, Mrs, Dr, Prof, Rev, Sir, Unknown Can be blank FirstName The first given name of an applicant 2 - 32 characters Can be blank MiddleName The middle name(s) of an applicant 1 - 32 characters Optional Surname The surname of an applicant. 2 - 32 characters Can be blank BillingAddress Holds the billing address details of an applicant See AddressDetails Object Type Yes DeliveryAddress Holds the delivery address of an applicant See AddressDetails Object Type Yes WorkPhoneArea Area code for a work phone number 2 numbers starting with a 0 Required if WorkPhoneNumber supplied WorkPhoneNumber Phone number of a work phone 8 digits long No HomePhoneArea Area code for a home phone number 2 numbers starting with a 0 Required if HomePhoneNumber supplied MobilePhoneNumber Applicant's mobile number 10 numbers long, must start '04' No EmailAddress Applicant's email address Must be a valid email address No ReturnApprovedUrl The return web address back to the merchant site when the application is APPROVED. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes ReturnDeclineUrl The return web address back to the merchant site when the application is DECLINED. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes ReturnWithdrawUrl The return web address back to the merchant site when the application is WITHDRAWN by the customer. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes AddressDetails Object Type The AddressDetails object is a complex object type that is passed to the BeginIPLTransaction method inside a TransactionData object , which holds information about an applicant\u2019s address. This object contains the following values: Name Description Valdiation Required? AddressType The type of address supplied Must be one of: Residential or Delviery Yes UnitNumber Address unit number 1 - 8 characters long No StreetNumber Address street number 1 - 8 characters long Can be blank StreetName Address street name 2 - 64 characters long Can be blank StreetType Address street type Must be a valid street type. Please see Street type codes. Can be blank Suburb Address suburb name 2 - 64 characters long Can be blank State State of an address Must be one of the followign values: NSW, VIC, TAS, WA, SA, ACT, NT, QLD Can be blank Postcode Address postcode 4 digits Can be blank Street Type Code The street type supplied with addresses MUST be one of these; any other will cause the application to be declined.","title":"Checkout Web Services"},{"location":"developer_resources/checkout_web_service/#checkout-web-services","text":"The primary purpose of the Skye web service is to expose key functionalities of the Skye system to merchants. Using the Skye web service merchants can initiate, retrieve, confirm and cancel their customer\u2019s Skye transactions. The Skye web services are only accessible by registered merchants. To be able to call the web services, you need to have the following: Merchant Id Secret Key Operator Id Password Product Code There are 4 main methods available in the Skye Web Service:","title":"Checkout web services"},{"location":"developer_resources/checkout_web_service/#beginipltransaction","text":"This method is used to confirm, the connectivity, pass information about the applying applicant and initiate a new online credit transaction.","title":"BeginIPLTransaction"},{"location":"developer_resources/checkout_web_service/#method-inputs","text":"Parameter Description Data Type TransactionInformation Required This parameter contains all the information to be passed to the Skye system. Such as the applicant\u2019s name and merchant site return URL. TransactionData SecretKey Required This parameter contains a secret key that will be provided by Skye IT and will need to be passed to get a transaction ID from the Skye Systems String","title":"Method Inputs"},{"location":"developer_resources/checkout_web_service/#method-output","text":"If this method successfully runs (no exceptions are passed to your system), a string value containing the unique transaction ID will be returned. This ID is used for all future method calls relating to this Skye transaction.","title":"Method Output"},{"location":"developer_resources/checkout_web_service/#method-specification","text":"The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=BeginIPLTransaction","title":"Method Specification"},{"location":"developer_resources/checkout_web_service/#getipltransactionstatus","text":"This method is used to query the status of the transaction for a given transaction ID (given to you when you call BeginIPLTransaction).","title":"GetIPLTransactionStatus"},{"location":"developer_resources/checkout_web_service/#method-inputs_1","text":"Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String","title":"Method Inputs"},{"location":"developer_resources/checkout_web_service/#method-output_1","text":"This method will return a string value of the current status of this transaction.","title":"Method Output"},{"location":"developer_resources/checkout_web_service/#method-specification_1","text":"The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=GetIPLTransactionStatus","title":"Method Specification"},{"location":"developer_resources/checkout_web_service/#commitipltransaction","text":"This method is used to commit the transaction upon final confirmation of the order by the customer.","title":"CommitIPLTransaction"},{"location":"developer_resources/checkout_web_service/#method-inputs_2","text":"Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String","title":"Method Inputs"},{"location":"developer_resources/checkout_web_service/#method-output_2","text":"This method will return a Boolean value of true if the commit succeeded or false if it failed. If a transaction isn't committed successfully, it will be withdrawn automatically.","title":"Method Output"},{"location":"developer_resources/checkout_web_service/#method-specification_2","text":"The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=CommitIPLTransaction","title":"Method Specification"},{"location":"developer_resources/checkout_web_service/#getipltransaction","text":"This is an optional method which can be used to return all the information passed through to the Skye system (including the Skye Application ID).","title":"GetIPLTransaction"},{"location":"developer_resources/checkout_web_service/#method-inputs_3","text":"Parameter Description Data Type TransactionID Required This is the unique transaction ID that was returned from the BeginIPLTransaction method. String MerchantId Required Your unique merchant id that was provided to you for the Skye service. String","title":"Method Inputs"},{"location":"developer_resources/checkout_web_service/#method-output_3","text":"This method will return a TransactionData object of the current Skye transaction, which contains all the information that was passed in the BeginIPLTransaction method call.","title":"Method Output"},{"location":"developer_resources/checkout_web_service/#method-specification_3","text":"The method input and output specification can be found here: https://applications.flexicards.com.au/IPL_service/ipltransaction.asmx?op=GetIPLTransaction","title":"Method Specification"},{"location":"developer_resources/checkout_web_service/#transactiondata-object-type","text":"The TransactionData object is a complex object type that is passed to the BeginIPLTransaction method in order to load applicant details and information about the merchant. This object contains the following values, most of these are optional (with different requirements for different products), though if customer details are available they will be automatically used in the Skye screens to make the application process easier for the customer: Name Description Valdiation Required? MerchantId The merchant id that has been provided to you by Skye. Yes OperatorId Operator ID that has been provided to you by Skye. Yes Password Password that has been provided to you by Skye. NB: DO NOT PASS THE ENCRYPTED PASSWORD, that is only used for the redirect. Yes CreditProduct Yes Offer One of the Valid Offer ID\u2019s provided to you by Skye Yes OrderNumber The merchant\u2019s identifier for this application No Description The description of the transaction Not used yet No Amount The amount of the transaction A numeric value above the agreed minimum, and below the agreed maximum (a range of 500 to 6000 is normal, but can be extended). Yes ExistingCustomer Existing customer flag to indicate if the applicant is a returning customer of the retailer. Boolean Yes Title The salutation of the applicant. Must be one of the following values: Mr, Miss, Ms, Mrs, Dr, Prof, Rev, Sir, Unknown Can be blank FirstName The first given name of an applicant 2 - 32 characters Can be blank MiddleName The middle name(s) of an applicant 1 - 32 characters Optional Surname The surname of an applicant. 2 - 32 characters Can be blank BillingAddress Holds the billing address details of an applicant See AddressDetails Object Type Yes DeliveryAddress Holds the delivery address of an applicant See AddressDetails Object Type Yes WorkPhoneArea Area code for a work phone number 2 numbers starting with a 0 Required if WorkPhoneNumber supplied WorkPhoneNumber Phone number of a work phone 8 digits long No HomePhoneArea Area code for a home phone number 2 numbers starting with a 0 Required if HomePhoneNumber supplied MobilePhoneNumber Applicant's mobile number 10 numbers long, must start '04' No EmailAddress Applicant's email address Must be a valid email address No ReturnApprovedUrl The return web address back to the merchant site when the application is APPROVED. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes ReturnDeclineUrl The return web address back to the merchant site when the application is DECLINED. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes ReturnWithdrawUrl The return web address back to the merchant site when the application is WITHDRAWN by the customer. If you add \u201ctransaction=[TRANSACTIONID]\u201d to the end then it will be replaced with the actual Transaction ID upon returning. Must be a valid URL to return back to Yes","title":"TransactionData Object Type"},{"location":"developer_resources/checkout_web_service/#addressdetails-object-type","text":"The AddressDetails object is a complex object type that is passed to the BeginIPLTransaction method inside a TransactionData object , which holds information about an applicant\u2019s address. This object contains the following values: Name Description Valdiation Required? AddressType The type of address supplied Must be one of: Residential or Delviery Yes UnitNumber Address unit number 1 - 8 characters long No StreetNumber Address street number 1 - 8 characters long Can be blank StreetName Address street name 2 - 64 characters long Can be blank StreetType Address street type Must be a valid street type. Please see Street type codes. Can be blank Suburb Address suburb name 2 - 64 characters long Can be blank State State of an address Must be one of the followign values: NSW, VIC, TAS, WA, SA, ACT, NT, QLD Can be blank Postcode Address postcode 4 digits Can be blank","title":"AddressDetails Object Type"},{"location":"developer_resources/checkout_web_service/#street-type-code","text":"The street type supplied with addresses MUST be one of these; any other will cause the application to be declined.","title":"Street Type Code"},{"location":"developer_resources/introduction/","text":"Introduction While shopping on online merchant sites, customers will have the ability to select the Skye payment service during their checkout process. Selecting the Skye payment service, the merchant will first transfer customer information to the Skye system before transferring the customer onto the Skye origination website. Here the customer will enter information necessary to complete the Skye origination process. When the origination process has completed the customer will be transferred back to the merchant checkout page, and if approved, will be able to finalise their online purchase. Upon confirmation of the online purchase the merchant will be credited with the transaction amount. The Skye Online product is a revolving line of credit that supports transactions over an agreed minimum amount (usually a few hundred dollars). Architecture The Web Services provided are implemented using the SOAP Web Service standard which is a detailed and well supported standard. To use the Skye Online system a number of Web Services need to be called to setup a transaction and later to check the result of the transaction, and confirm it. This process begins by creating an object to hold information about the applicant and the merchant. Once the object has been created on the merchant system, it will be passed to the Skye system to create a new transaction. This process will provide you with a unique identifier for this new transaction. The user is then re-directed to the Skye system to continue their data entry. Once the user\u2019s IFOL application has been accepted or rejected, they will be returned to the merchant site and given the option to confirm their choice of the Skye payment method if they have been approved. Merchants will interact with the Skye system via two components: Skye Web Service Skye Origination website Pre-requisites to integration Prior to commencing building integration to Skye web services, the following conditions are prefferred: Availability of a test merchant website/environment. Requests for testing integration from a live website will not be entertained. SSL Certificate for Production Shopping Cart. SSL certificate for test (preferred). To mimic the production setup as close as possible so that no \u201cnew\u201d bugs are introduced during go-live, it is recommended that the test merchant website (shopping cart at least) have a working SSL certificate and testing is done on SSL . You have received the correct test credentials from Skye. Unique order number (preferred). Save shopping cart functionality (preferred). At times there might be issues during the final confirmation from the merchant website. In such cases Skye IT can manually settle the application on behalf of a customer. Therefore it is recommended that the merchant have the shopping cart saved with a unique reference that can be retrieved and processed. Sufficiently long timeout. To avoid issues where your shopping cart may time out while the applicant is completing the finance application. it is recommended that you have a 60 minute timeout on your shopping cart.","title":"Introduction"},{"location":"developer_resources/introduction/#introduction","text":"While shopping on online merchant sites, customers will have the ability to select the Skye payment service during their checkout process. Selecting the Skye payment service, the merchant will first transfer customer information to the Skye system before transferring the customer onto the Skye origination website. Here the customer will enter information necessary to complete the Skye origination process. When the origination process has completed the customer will be transferred back to the merchant checkout page, and if approved, will be able to finalise their online purchase. Upon confirmation of the online purchase the merchant will be credited with the transaction amount. The Skye Online product is a revolving line of credit that supports transactions over an agreed minimum amount (usually a few hundred dollars).","title":"Introduction"},{"location":"developer_resources/introduction/#architecture","text":"The Web Services provided are implemented using the SOAP Web Service standard which is a detailed and well supported standard. To use the Skye Online system a number of Web Services need to be called to setup a transaction and later to check the result of the transaction, and confirm it. This process begins by creating an object to hold information about the applicant and the merchant. Once the object has been created on the merchant system, it will be passed to the Skye system to create a new transaction. This process will provide you with a unique identifier for this new transaction. The user is then re-directed to the Skye system to continue their data entry. Once the user\u2019s IFOL application has been accepted or rejected, they will be returned to the merchant site and given the option to confirm their choice of the Skye payment method if they have been approved. Merchants will interact with the Skye system via two components: Skye Web Service Skye Origination website","title":"Architecture"},{"location":"developer_resources/introduction/#pre-requisites-to-integration","text":"Prior to commencing building integration to Skye web services, the following conditions are prefferred: Availability of a test merchant website/environment. Requests for testing integration from a live website will not be entertained. SSL Certificate for Production Shopping Cart. SSL certificate for test (preferred). To mimic the production setup as close as possible so that no \u201cnew\u201d bugs are introduced during go-live, it is recommended that the test merchant website (shopping cart at least) have a working SSL certificate and testing is done on SSL . You have received the correct test credentials from Skye. Unique order number (preferred). Save shopping cart functionality (preferred). At times there might be issues during the final confirmation from the merchant website. In such cases Skye IT can manually settle the application on behalf of a customer. Therefore it is recommended that the merchant have the shopping cart saved with a unique reference that can be retrieved and processed. Sufficiently long timeout. To avoid issues where your shopping cart may time out while the applicant is completing the finance application. it is recommended that you have a 60 minute timeout on your shopping cart.","title":"Pre-requisites to integration"},{"location":"developer_resources/refund_api/","text":"Refund API Humm provides an API to programmatically process refunds or adjustments to an humm purchase. Humm Endpoints Humm Environment URL Production Endpoint https://buyerapi.%domain%/api/ExternalRefund/v1/processrefund Sandbox Endpoint https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund Request Headers Key Value Content-Type application/json Body { \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52004168\", \"x_amount\": \"10.00\", \"x_reason\": \"Test refund\", \"signature\": \"e39ae5f3233f561162836989e050c1b61ba9e3d5eb3d64d4b3701e95fb5850a1\" } See Signature Generation for information on how to generate the HMAC Signature. Response HTTP Status Reason Code Reason Description 204 none Success 400 MERR0001 API Key Not found 400 MERR0003 Refund Failed 400 MERR0004 Invalid Request 401 none Failed Signature Check Example The following curl command will allow you to test the refunds API. You will need to substitute your x_merchant_number, x_purchase_number and signature curl \\ --header \"Content-Type:application/json\" \\ --request POST \\ --data '{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52000152\", \"x_amount\": 45.00, \"x_reason\": \"test\", \"signature\": \"a5fc92ddd2326c6099bd0f43bbe75afb54004a6ba68f354cc2b40328341d8ee2\" }' \\ https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Refund API"},{"location":"developer_resources/refund_api/#refund-api","text":"Humm provides an API to programmatically process refunds or adjustments to an humm purchase.","title":"Refund API"},{"location":"developer_resources/refund_api/#humm-endpoints","text":"Humm Environment URL Production Endpoint https://buyerapi.%domain%/api/ExternalRefund/v1/processrefund Sandbox Endpoint https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Humm Endpoints"},{"location":"developer_resources/refund_api/#request","text":"","title":"Request"},{"location":"developer_resources/refund_api/#headers","text":"Key Value Content-Type application/json","title":"Headers"},{"location":"developer_resources/refund_api/#body","text":"{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52004168\", \"x_amount\": \"10.00\", \"x_reason\": \"Test refund\", \"signature\": \"e39ae5f3233f561162836989e050c1b61ba9e3d5eb3d64d4b3701e95fb5850a1\" } See Signature Generation for information on how to generate the HMAC Signature.","title":"Body"},{"location":"developer_resources/refund_api/#response","text":"HTTP Status Reason Code Reason Description 204 none Success 400 MERR0001 API Key Not found 400 MERR0003 Refund Failed 400 MERR0004 Invalid Request 401 none Failed Signature Check","title":"Response"},{"location":"developer_resources/refund_api/#example","text":"The following curl command will allow you to test the refunds API. You will need to substitute your x_merchant_number, x_purchase_number and signature curl \\ --header \"Content-Type:application/json\" \\ --request POST \\ --data '{ \"x_merchant_number\": \"30199250\", \"x_purchase_number\": \"52000152\", \"x_amount\": 45.00, \"x_reason\": \"test\", \"signature\": \"a5fc92ddd2326c6099bd0f43bbe75afb54004a6ba68f354cc2b40328341d8ee2\" }' \\ https://integration-buyerapi.%domain%/api/ExternalRefund/v1/processrefund","title":"Example"},{"location":"developer_resources/sample_curl/","text":"Sample cURL Script Below is a sample cURL script that you can use to test the humm test (sandbox) gateway. curl 'https://securesandbox.%domain%/Checkout?platform=Default' -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d 'x_account_id=%merchantID_for_curl%&x_currency=%currency_abbr%&x_amount=89&x_reference=9051364487&x_shop_country=%country_abbr%&x_shop_name=Example+Store&x_transaction_type=&x_description=Tim%27s+Pet+Store&x_invoice=239051364487&x_test=true&x_customer_first_name=John&x_customer_last_name=Citizen&x_customer_email=john.citizen%40example.com&x_customer_billing_address1=some+address&x_customer_billing_address2=&x_customer_billing_city=%address_city%&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_url_callback=http%3A%2F%2Fexample.com%2Fcallback.php&x_url_cancel=http%3A%2F%2Fexample.com%2Fcart.php&x_url_complete=http%3A%2F%2Fexample.com%2Fcomplete.php&x_signature=%signature_for_curl%'","title":"Sample test page"},{"location":"developer_resources/sample_curl/#sample-curl-script","text":"Below is a sample cURL script that you can use to test the humm test (sandbox) gateway. curl 'https://securesandbox.%domain%/Checkout?platform=Default' -H 'Content-Type: application/x-www-form-urlencoded' -X POST -d 'x_account_id=%merchantID_for_curl%&x_currency=%currency_abbr%&x_amount=89&x_reference=9051364487&x_shop_country=%country_abbr%&x_shop_name=Example+Store&x_transaction_type=&x_description=Tim%27s+Pet+Store&x_invoice=239051364487&x_test=true&x_customer_first_name=John&x_customer_last_name=Citizen&x_customer_email=john.citizen%40example.com&x_customer_billing_address1=some+address&x_customer_billing_address2=&x_customer_billing_city=%address_city%&x_customer_billing_state=%address_state_abbr%&x_customer_billing_zip=%address_post_code%&x_url_callback=http%3A%2F%2Fexample.com%2Fcallback.php&x_url_cancel=http%3A%2F%2Fexample.com%2Fcart.php&x_url_complete=http%3A%2F%2Fexample.com%2Fcomplete.php&x_signature=%signature_for_curl%'","title":"Sample cURL Script"},{"location":"developer_resources/signature_generation/","text":"Signature Generation To prevent against malicious attacks, humm implements HMAC-SHA256 signing. We explain how to use HMAC-SHA256 for signing and verification purposes. There are two instances where signature generation is required: When sending a POST request to humm When receiving both a response POST or GET from humm PHP Example Below is a PHP example on how you can implement a method for signature generation. function humm_sign($query, $api_key ) { $clear_text = ''; ksort($query); foreach ($query as $key => $value) { if (substr($key, 0, 2) === \"x_\" && $key !== \"x_signature\") { $clear_text .= $key . $value; } } $hash = hash_hmac( \"sha256\", $clear_text, $api_key); return str_replace('-', '', $hash); } The method expects two parameters: $query and $api_key : * $query represents the various key-value pairs that form your HTTP request POST and vary depending on the information that is entered as part of the checkout process on your shopping cart. $api_key represents the merchant's unique API Key that. It should remain the same and only changes if changed by humm . Having received the two parameters, humm _sign method thens perform alphabetical sorting of the various key-value pairs based on the key but still maintaining the correlation between the keys and their respective values. It then examines the query $query variable for the various key-value pairs by checking for the x_ prefix and then appends them together. Note: When signing a request, all fields starting with x_ must be used, except for x_signature . The method then computes the keyed hash value using the hash_hmac method. Java Example import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import javax.crypto.Mac; import javax.crypto.spec.SecretKeySpec; import java.security.InvalidKeyException; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.binary.Base64; import java.security.NoSuchAlgorithmException; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import java.util.HashMap; import java.util.List; import java.util.Set; class Main { private static final String _merchantId = \"<insert your merchantId here>\"; private static final String _key = \"<insert your key here>\"; private static final String _hashAlgorithm = \"HmacSHA256\"; public static void main(String[] args) { HashMap<String, String> map = new HashMap<String, String>(); map.put(\"x_url_callback\", \"http://example.com/payments/humm/process\"); map.put(\"x_url_cancel\", \"http://example.com/payments/humm/cancel\"); map.put(\"x_url_complete\", \"http://example.com/payments/humm/process\"); map.put(\"x_account_id\", _merchantId); map.put(\"x_amount\", \"400.00\"); map.put(\"x_currency\", \"AUD\"); map.put(\"x_reference\", \"TestOrder1\"); map.put(\"x_shop_country\", \"AU\"); map.put(\"x_shop_name\", \"Humm Mugs\"); map.put(\"x_test\", \"false\"); String plainText = signatureGeneration(_key, map); System.out.println(\"Plain Text: \" + plainText); // generate the HMAC String hmac = signMessage(plainText, _key); System.out.println(\"HMAC \" + hmac); } public static String signatureGeneration(String gatewayKey, HashMap apiArgs) { String[] stringArray = Arrays.copyOf(apiArgs.keySet().toArray(), apiArgs.size(), String[].class); List<String> keys = Arrays.asList(stringArray); // Sort the List try { Collections.sort(keys); } catch (Exception e) { System.out.print(e.getMessage()); } String plainText = \"\"; for(String key : keys){ plainText += (key + apiArgs.get(key)); } return plainText; } private static String signMessage(String plainText, String key){ String signature = \"\"; try { Mac hmac = Mac.getInstance(_hashAlgorithm); SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), _hashAlgorithm); hmac.init(secretKey); signature = Hex.encodeHexString(hmac.doFinal(plainText.getBytes(\"UTF-8\"))); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (NoSuchAlgorithmException e) { System.out.format(\"You do not have the %s libraries installed\", _hashAlgorithm); } return signature; } } Go Example // RegistrationPayload required to register a device with humm type RegistrationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` DeviceToken string `json:\"x_device_token\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` POSVendor string `json:\"x_pos_vendor\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } // AuthorisationPayload Payload used to send to humm type AuthorisationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` PosTransactionRef string `json:\"x_pos_transaction_ref\"` PreApprovalCode string `json:\"x_pre_approval_code\"` FinanceAmount string `json:\"x_finance_amount\"` PurchaseAmount string `json:\"x_purchase_amount\"` Signature string `json:\"signature\"` } // Response is the response returned from humm for both a CreateKey and Sales Adjustment type Response struct { PurchaseNumber string `json:\"x_purchase_number,omitempty\"` Status string `json:\"x_status,omitempty\"` Code string `json:\"x_code,omitempty\"` Message string `json:\"x_message\"` Key string `json:\"x_key,omitempty\"` Signature string `json:\"signature\"` } // SalesAdjustmentPayload holds a request to humm for the ProcessAdjustment type SalesAdjustmentPayload struct { PosTransactionRef string `json:\"x_pos_transaction_ref\"` PurchaseRef string `json:\"x_purchase_ref\"` MerchantID string `json:\"x_merchant_id\"` Amount string `json:\"x_amount,omitempty\"` DeviceID string `json:\"x_device_id,omitempty\"` OperatorID string `json:\"x_operator_id,omitempty\"` FirmwareVersion string `json:\"x_firmware_version,omitempty\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } //Authenticate validates HMAC func (r *Response) Authenticate(key string) (bool, error) { responsePlainText := GeneratePlainTextSignature(r) if len(r.Signature) >= 0 { return CheckMAC([]byte(responsePlainText), []byte(r.Signature), []byte(key)) } return false, errors.New(\"Plaintext is signature is 0 length\") } // GeneratePlainTextSignature will generate an humm plain text message ready for signing func GeneratePlainTextSignature(payload interface{}) string { var buffer bytes.Buffer // create a temporary map so we can sort the keys, // go intentionally randomises maps so we need to // store the keys in an array which we can sort v := reflect.TypeOf(payload).Elem() y := reflect.ValueOf(payload) if y.IsNil() { return \"\" } x := y.Elem() payloadList := make(map[string]string, x.NumField()) for i := 0; i < x.NumField(); i++ { field := x.Field(i) ftype := v.Field(i) data := field.Interface() tag := ftype.Tag.Get(\"json\") idx := strings.Index(tag, \",\") if idx > 0 { tag = tag[:idx] } payloadList[tag] = data.(string) } var keys []string for k := range payloadList { keys = append(keys, k) } sort.Strings(keys) for _, v := range keys { // there shouldn't be any nil values // Signature needs to be populated with the actual HMAC // calld if v[0:2] == \"x_\" && payloadList[v] != \"\" { buffer.WriteString(fmt.Sprintf(\"%s%s\", v, payloadList[v])) } } plainText := buffer.String() return plainText } // SignMessage will generate an HMAC of the plaintext func SignMessage(plainText string, signingKey string) string { key := []byte(signingKey) mac := hmac.New(sha256.New, key) mac.Write([]byte(plainText)) macString := hex.EncodeToString(mac.Sum(nil)) return macString }","title":"Signature Generation"},{"location":"developer_resources/signature_generation/#signature-generation","text":"To prevent against malicious attacks, humm implements HMAC-SHA256 signing. We explain how to use HMAC-SHA256 for signing and verification purposes. There are two instances where signature generation is required: When sending a POST request to humm When receiving both a response POST or GET from humm","title":"Signature Generation"},{"location":"developer_resources/signature_generation/#php-example","text":"Below is a PHP example on how you can implement a method for signature generation. function humm_sign($query, $api_key ) { $clear_text = ''; ksort($query); foreach ($query as $key => $value) { if (substr($key, 0, 2) === \"x_\" && $key !== \"x_signature\") { $clear_text .= $key . $value; } } $hash = hash_hmac( \"sha256\", $clear_text, $api_key); return str_replace('-', '', $hash); } The method expects two parameters: $query and $api_key : * $query represents the various key-value pairs that form your HTTP request POST and vary depending on the information that is entered as part of the checkout process on your shopping cart. $api_key represents the merchant's unique API Key that. It should remain the same and only changes if changed by humm . Having received the two parameters, humm _sign method thens perform alphabetical sorting of the various key-value pairs based on the key but still maintaining the correlation between the keys and their respective values. It then examines the query $query variable for the various key-value pairs by checking for the x_ prefix and then appends them together. Note: When signing a request, all fields starting with x_ must be used, except for x_signature . The method then computes the keyed hash value using the hash_hmac method.","title":"PHP Example"},{"location":"developer_resources/signature_generation/#java-example","text":"import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import javax.crypto.Mac; import javax.crypto.spec.SecretKeySpec; import java.security.InvalidKeyException; import org.apache.commons.codec.binary.Hex; import org.apache.commons.codec.binary.Base64; import java.security.NoSuchAlgorithmException; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import java.util.HashMap; import java.util.List; import java.util.Set; class Main { private static final String _merchantId = \"<insert your merchantId here>\"; private static final String _key = \"<insert your key here>\"; private static final String _hashAlgorithm = \"HmacSHA256\"; public static void main(String[] args) { HashMap<String, String> map = new HashMap<String, String>(); map.put(\"x_url_callback\", \"http://example.com/payments/humm/process\"); map.put(\"x_url_cancel\", \"http://example.com/payments/humm/cancel\"); map.put(\"x_url_complete\", \"http://example.com/payments/humm/process\"); map.put(\"x_account_id\", _merchantId); map.put(\"x_amount\", \"400.00\"); map.put(\"x_currency\", \"AUD\"); map.put(\"x_reference\", \"TestOrder1\"); map.put(\"x_shop_country\", \"AU\"); map.put(\"x_shop_name\", \"Humm Mugs\"); map.put(\"x_test\", \"false\"); String plainText = signatureGeneration(_key, map); System.out.println(\"Plain Text: \" + plainText); // generate the HMAC String hmac = signMessage(plainText, _key); System.out.println(\"HMAC \" + hmac); } public static String signatureGeneration(String gatewayKey, HashMap apiArgs) { String[] stringArray = Arrays.copyOf(apiArgs.keySet().toArray(), apiArgs.size(), String[].class); List<String> keys = Arrays.asList(stringArray); // Sort the List try { Collections.sort(keys); } catch (Exception e) { System.out.print(e.getMessage()); } String plainText = \"\"; for(String key : keys){ plainText += (key + apiArgs.get(key)); } return plainText; } private static String signMessage(String plainText, String key){ String signature = \"\"; try { Mac hmac = Mac.getInstance(_hashAlgorithm); SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(\"UTF-8\"), _hashAlgorithm); hmac.init(secretKey); signature = Hex.encodeHexString(hmac.doFinal(plainText.getBytes(\"UTF-8\"))); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } catch (InvalidKeyException e) { e.printStackTrace(); } catch (NoSuchAlgorithmException e) { System.out.format(\"You do not have the %s libraries installed\", _hashAlgorithm); } return signature; } }","title":"Java Example"},{"location":"developer_resources/signature_generation/#go-example","text":"// RegistrationPayload required to register a device with humm type RegistrationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` DeviceToken string `json:\"x_device_token\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` POSVendor string `json:\"x_pos_vendor\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } // AuthorisationPayload Payload used to send to humm type AuthorisationPayload struct { MerchantID string `json:\"x_merchant_id\"` DeviceID string `json:\"x_device_id\"` OperatorID string `json:\"x_operator_id\"` FirmwareVersion string `json:\"x_firmware_version\"` PosTransactionRef string `json:\"x_pos_transaction_ref\"` PreApprovalCode string `json:\"x_pre_approval_code\"` FinanceAmount string `json:\"x_finance_amount\"` PurchaseAmount string `json:\"x_purchase_amount\"` Signature string `json:\"signature\"` } // Response is the response returned from humm for both a CreateKey and Sales Adjustment type Response struct { PurchaseNumber string `json:\"x_purchase_number,omitempty\"` Status string `json:\"x_status,omitempty\"` Code string `json:\"x_code,omitempty\"` Message string `json:\"x_message\"` Key string `json:\"x_key,omitempty\"` Signature string `json:\"signature\"` } // SalesAdjustmentPayload holds a request to humm for the ProcessAdjustment type SalesAdjustmentPayload struct { PosTransactionRef string `json:\"x_pos_transaction_ref\"` PurchaseRef string `json:\"x_purchase_ref\"` MerchantID string `json:\"x_merchant_id\"` Amount string `json:\"x_amount,omitempty\"` DeviceID string `json:\"x_device_id,omitempty\"` OperatorID string `json:\"x_operator_id,omitempty\"` FirmwareVersion string `json:\"x_firmware_version,omitempty\"` TrackingData string `json:\"tracking_data,omitempty\"` Signature string `json:\"signature\"` } //Authenticate validates HMAC func (r *Response) Authenticate(key string) (bool, error) { responsePlainText := GeneratePlainTextSignature(r) if len(r.Signature) >= 0 { return CheckMAC([]byte(responsePlainText), []byte(r.Signature), []byte(key)) } return false, errors.New(\"Plaintext is signature is 0 length\") } // GeneratePlainTextSignature will generate an humm plain text message ready for signing func GeneratePlainTextSignature(payload interface{}) string { var buffer bytes.Buffer // create a temporary map so we can sort the keys, // go intentionally randomises maps so we need to // store the keys in an array which we can sort v := reflect.TypeOf(payload).Elem() y := reflect.ValueOf(payload) if y.IsNil() { return \"\" } x := y.Elem() payloadList := make(map[string]string, x.NumField()) for i := 0; i < x.NumField(); i++ { field := x.Field(i) ftype := v.Field(i) data := field.Interface() tag := ftype.Tag.Get(\"json\") idx := strings.Index(tag, \",\") if idx > 0 { tag = tag[:idx] } payloadList[tag] = data.(string) } var keys []string for k := range payloadList { keys = append(keys, k) } sort.Strings(keys) for _, v := range keys { // there shouldn't be any nil values // Signature needs to be populated with the actual HMAC // calld if v[0:2] == \"x_\" && payloadList[v] != \"\" { buffer.WriteString(fmt.Sprintf(\"%s%s\", v, payloadList[v])) } } plainText := buffer.String() return plainText } // SignMessage will generate an HMAC of the plaintext func SignMessage(plainText string, signingKey string) string { key := []byte(signingKey) mac := hmac.New(sha256.New, key) mac.Write([]byte(plainText)) macString := hex.EncodeToString(mac.Sum(nil)) return macString }","title":"Go Example"},{"location":"ecommerce/cubecart/","text":"Setting up humm on a CubeCart Store This document outlines the steps needed to install humm on your CubeCart Store. humm was tested against CubeCart version 6.1.1 , however, should be compatible against other versions. Installing humm You will need a Merchant ID and API Key before continuing with the installation procedure. They are required to uniquely identify the Merchant and provide a secure link. If you don't have either of these, please contact support@%domain% The plugin can be installed via CubeCart's Admin Control Panel, either manually or automatically using a Token. This section details how to upload the plugin, and install and configure its various parameters for it to work properly. If you have trouble accessing your CubeCart's Admin Control Panel, please consult CubeCart's official knowledgebase and forums , or your IT department to resolve the issue. Automatic Installation using Token 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page and select the Go button. 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . If the automatic installation is not successful, you will be presented with a message at the top of the page similar to the screenshot below. If this continues to be a problem, please refer to the Manual Installation procedure. Manual Installation 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the download button , next to your required humm plugin version, to download the humm plugin ZIP file. 3 - Extract the ZIP file and copy the contents to the modules/gateway folder of your server\u2019s/site directory. 4 - Ensure the folders/files have adequate read/write permissions set. 5 - Log into the CubeCart Admin Control Panel as an Administrator. 6 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . Configuring humm This section describes the Module Settings available once you have installed the **humm** plugin. This includes the **humm** gateways to communicate with, as well as whether or not to enable Test Mode. 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - Under the Available Extensions section, select the text Humm to configure the module settings. Descriptions of the options are listed below. We have intentionally masked the Merchant ID and API Key in this support document. Please contact us and we will advise you of the settings to use. Status This must be enabled for the payment options to appear during checkout. Priority If you have more than one payment gateway, please use this field to define the order they are shown in. A setting of '1' will show it first, '2' second, etc. Scope This allows you to specify whether you want the humm plugin to be available via the Main Website only or the Mobile Website only, or both. Default This must be enabled if you would like humm pre-selected for the Customer as the default payment option. Merchant ID This is the humm Merchant ID that you are provided with as part of your on-boarding when signing-up for humm . API Key The API Key or the Encryption key is a case-sensitive alpha-numeric sequence that is used to authenticate payment requests originating from your Store. It is vital that you protect it and don't provide it to unauthorised individuals. Test Mode Indicates whether to process payments over the live humm Gateway URL resulting in real transactions, or to process it over the humm Sandbox Gateway URL which will produce simulated (test) transactions with no real dollar amounts being debited. By default it should be set to No unless we are attempting to diagnose issues on your store to do with humm , or you're testing integrating the plugin with your online CubeCart store. Test Gateway URL This specifies the test humm end-point that the plugin would need to communicate with when Test Mode is enabled. This is mainly used for troubleshooting purposes, particularly if we want to simulate test transactions on your CubeCart Store without having real dollar amounts debited from Credit Cards. Gateway URL This specifies the live humm end-point that the plugin would need to communicate with for it to be able to process payments via humm . Note that transactions processed over this URL are real transactions that end up in real dollar amounts being deducted. 4 - Once you have finished making the necessary configuration changes, click the Save button. 5 - %country% will be automatically set as an Enabled Region in the Allowed Zones tab. This must match the Country set in the CubeCart Store Settings. Upgrading humm Automatic Upgrade Importantly, when you perform an automatic upgrade, all the module settings are retained. That is, you do not need to type in your Merchant ID and API Key again. 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page. 7 - If you enable the option to Backup if already exists , a backup of the previous plugin version will be created. 8 - Select the Go button to complete the upgrade. Manual Upgrade Prior to manually upgrading, you will first need to un-install the previous version. Un-installing humm 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - In the list of Available Extensions , select the delete button associated with the Humm extension. 4 - If the module has been un-installed correctly, the module will no longer appear in the list of Available Extensions . 5 - You can now download the new version of the humm CubeCart plugin and install it as per the instructions in the Installing humm section of this document.","title":"Setting up **humm** on a CubeCart Store"},{"location":"ecommerce/cubecart/#setting-up-humm-on-a-cubecart-store","text":"This document outlines the steps needed to install humm on your CubeCart Store. humm was tested against CubeCart version 6.1.1 , however, should be compatible against other versions.","title":"Setting up humm on a CubeCart Store"},{"location":"ecommerce/cubecart/#installing-humm","text":"You will need a Merchant ID and API Key before continuing with the installation procedure. They are required to uniquely identify the Merchant and provide a secure link. If you don't have either of these, please contact support@%domain% The plugin can be installed via CubeCart's Admin Control Panel, either manually or automatically using a Token. This section details how to upload the plugin, and install and configure its various parameters for it to work properly. If you have trouble accessing your CubeCart's Admin Control Panel, please consult CubeCart's official knowledgebase and forums , or your IT department to resolve the issue.","title":"Installing humm"},{"location":"ecommerce/cubecart/#automatic-installation-using-token","text":"1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page and select the Go button. 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions . If the automatic installation is not successful, you will be presented with a message at the top of the page similar to the screenshot below. If this continues to be a problem, please refer to the Manual Installation procedure.","title":"Automatic Installation using Token"},{"location":"ecommerce/cubecart/#manual-installation","text":"1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the download button , next to your required humm plugin version, to download the humm plugin ZIP file. 3 - Extract the ZIP file and copy the contents to the modules/gateway folder of your server\u2019s/site directory. 4 - Ensure the folders/files have adequate read/write permissions set. 5 - Log into the CubeCart Admin Control Panel as an Administrator. 6 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 7 - If the module has been installed correctly, the module will appear in the list of Available Extensions .","title":"Manual Installation"},{"location":"ecommerce/cubecart/#configuring-humm","text":"This section describes the Module Settings available once you have installed the **humm** plugin. This includes the **humm** gateways to communicate with, as well as whether or not to enable Test Mode. 1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - Under the Available Extensions section, select the text Humm to configure the module settings. Descriptions of the options are listed below. We have intentionally masked the Merchant ID and API Key in this support document. Please contact us and we will advise you of the settings to use. Status This must be enabled for the payment options to appear during checkout. Priority If you have more than one payment gateway, please use this field to define the order they are shown in. A setting of '1' will show it first, '2' second, etc. Scope This allows you to specify whether you want the humm plugin to be available via the Main Website only or the Mobile Website only, or both. Default This must be enabled if you would like humm pre-selected for the Customer as the default payment option. Merchant ID This is the humm Merchant ID that you are provided with as part of your on-boarding when signing-up for humm . API Key The API Key or the Encryption key is a case-sensitive alpha-numeric sequence that is used to authenticate payment requests originating from your Store. It is vital that you protect it and don't provide it to unauthorised individuals. Test Mode Indicates whether to process payments over the live humm Gateway URL resulting in real transactions, or to process it over the humm Sandbox Gateway URL which will produce simulated (test) transactions with no real dollar amounts being debited. By default it should be set to No unless we are attempting to diagnose issues on your store to do with humm , or you're testing integrating the plugin with your online CubeCart store. Test Gateway URL This specifies the test humm end-point that the plugin would need to communicate with when Test Mode is enabled. This is mainly used for troubleshooting purposes, particularly if we want to simulate test transactions on your CubeCart Store without having real dollar amounts debited from Credit Cards. Gateway URL This specifies the live humm end-point that the plugin would need to communicate with for it to be able to process payments via humm . Note that transactions processed over this URL are real transactions that end up in real dollar amounts being deducted. 4 - Once you have finished making the necessary configuration changes, click the Save button. 5 - %country% will be automatically set as an Enabled Region in the Allowed Zones tab. This must match the Country set in the CubeCart Store Settings.","title":"Configuring humm"},{"location":"ecommerce/cubecart/#upgrading-humm","text":"","title":"Upgrading humm"},{"location":"ecommerce/cubecart/#automatic-upgrade","text":"Importantly, when you perform an automatic upgrade, all the module settings are retained. That is, you do not need to type in your Merchant ID and API Key again. 1 - Navigate to the following URL. https://www.cubecart.com/extensions/payment-gateways/oxipay 2 - Select the lightning bolt button, next to your required humm plugin version, to reveal the Auto Install/Upgrade Token 3 - Copy the Token from within the pop-up. 4 - Log into the CubeCart Admin Control Panel as an Administrator. 5 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 6 - Copy the Auto Install/Upgrade Token into the Token field on the Manage Extensions page. 7 - If you enable the option to Backup if already exists , a backup of the previous plugin version will be created. 8 - Select the Go button to complete the upgrade.","title":"Automatic Upgrade"},{"location":"ecommerce/cubecart/#manual-upgrade","text":"Prior to manually upgrading, you will first need to un-install the previous version.","title":"Manual Upgrade"},{"location":"ecommerce/cubecart/#un-installing-humm","text":"1 - Log into the CubeCart Admin Control Panel as an Administrator. 2 - Once logged in, you will be presented with your Store's dashboard. From the side menu that appears to the left, scroll to the Extensions section and select Manage Extensions . 3 - In the list of Available Extensions , select the delete button associated with the Humm extension. 4 - If the module has been un-installed correctly, the module will no longer appear in the list of Available Extensions . 5 - You can now download the new version of the humm CubeCart plugin and install it as per the instructions in the Installing humm section of this document.","title":"Un-installing humm"},{"location":"ecommerce/magento_1/","text":"Magento 1 Locate your Skye Credentials To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code Plugin Installation / Upgrade 1 - You can create a backup of your store by navigating to System -> Tools -> Backup . 2 - Download the humm plugin zip from GitHub . 3 - Unzip it, then copy the following folders into the corresponding folders under your Magento root directory. app/ skin/ 4 - Login into Magento's Admin Panel , click on System then select Cache Management . 5 - On the Cache Management page, click on Flush Magento Cache . Configuration 1 - Navigating to System > Configuration . 2 - On Configuration page, scroll downwards then click on Payment Methods on left side menu. 3 - Confirm humm Checkout is visible and once expanded looks similar to the image below. Varnish Cache If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: YOUR_DOMAIN/HummPayments/payment/start/ YOUR_DOMAIN/HummPayments/payment/cancel/ YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted.","title":"Magento 1"},{"location":"ecommerce/magento_1/#magento-1","text":"","title":"Magento 1"},{"location":"ecommerce/magento_1/#locate-your-skye-credentials","text":"To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code","title":"Locate your Skye Credentials"},{"location":"ecommerce/magento_1/#plugin-installation-upgrade","text":"1 - You can create a backup of your store by navigating to System -> Tools -> Backup . 2 - Download the humm plugin zip from GitHub . 3 - Unzip it, then copy the following folders into the corresponding folders under your Magento root directory. app/ skin/ 4 - Login into Magento's Admin Panel , click on System then select Cache Management . 5 - On the Cache Management page, click on Flush Magento Cache .","title":"Plugin Installation / Upgrade"},{"location":"ecommerce/magento_1/#configuration","text":"1 - Navigating to System > Configuration . 2 - On Configuration page, scroll downwards then click on Payment Methods on left side menu. 3 - Confirm humm Checkout is visible and once expanded looks similar to the image below.","title":"Configuration"},{"location":"ecommerce/magento_1/#varnish-cache","text":"If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: YOUR_DOMAIN/HummPayments/payment/start/ YOUR_DOMAIN/HummPayments/payment/cancel/ YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted.","title":"Varnish Cache"},{"location":"ecommerce/magento_2/","text":"Integrating on Magento 2 Use the same instructions to upgrade the humm plugin to a newer release. Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Integrating humm using Composer Add the humm repository, in Magento's root directory composer config repositories.shophumm git https://github.com/shophumm/humm-magento2.x.git Require the Humm Payment Gateway Module composer require humm/module-humm-payment-gateway:dev-master Enable the module ./bin/magento module:enable Humm_HummPaymentGateway --clear-static-content Update the database ./bin/magento setup:upgrade Configure humm Integrating humm Manually 1 - Download the humm plugin zip from GitHub . 2 - Unzip it then copy the inner Humm folder into the MAGENTO_DIR/app/code directory on your webserver. If the code folder doesn't exist, then create it manually. 3 - Run MAGENTO_DIR/bin/magento setup:upgrade to enable humm . You should see Module 'Humm_HummPaymentGateway' in the output of the command. Depending on your tech stack, you might have to use the php prefix ( php MAGENTO_DIR/bin/magento setup:upgrade ) when running the various magento commands. 4 - Flush Magento's Cache: Settings -> Cache Management -> Flush Magento Cache . Alternatively, run MAGENTO_DIR/bin/magento cache:flush from command line. You may need to run MAGENTO_DIR/bin/magento setup:static-content:deploy . This is to avoid generated HTML referring to javascript/css that haven't been added to the list of compiled/minified assets which can break your store's front-end/admin panel. Configuration Navigate to Stores -> Configuration -> Sales -> Payment Methods . Varnish Cache If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: * YOUR_DOMAIN/HummPayments/payment/start/ * YOUR_DOMAIN/HummPayments/payment/cancel/ * YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted","title":"Magento 2"},{"location":"ecommerce/magento_2/#integrating-on-magento-2","text":"Use the same instructions to upgrade the humm plugin to a newer release.","title":"Integrating on Magento 2"},{"location":"ecommerce/magento_2/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/magento_2/#integrating-humm-using-composer","text":"Add the humm repository, in Magento's root directory composer config repositories.shophumm git https://github.com/shophumm/humm-magento2.x.git Require the Humm Payment Gateway Module composer require humm/module-humm-payment-gateway:dev-master Enable the module ./bin/magento module:enable Humm_HummPaymentGateway --clear-static-content Update the database ./bin/magento setup:upgrade Configure humm","title":"Integrating humm using Composer"},{"location":"ecommerce/magento_2/#integrating-humm-manually","text":"1 - Download the humm plugin zip from GitHub . 2 - Unzip it then copy the inner Humm folder into the MAGENTO_DIR/app/code directory on your webserver. If the code folder doesn't exist, then create it manually. 3 - Run MAGENTO_DIR/bin/magento setup:upgrade to enable humm . You should see Module 'Humm_HummPaymentGateway' in the output of the command. Depending on your tech stack, you might have to use the php prefix ( php MAGENTO_DIR/bin/magento setup:upgrade ) when running the various magento commands. 4 - Flush Magento's Cache: Settings -> Cache Management -> Flush Magento Cache . Alternatively, run MAGENTO_DIR/bin/magento cache:flush from command line. You may need to run MAGENTO_DIR/bin/magento setup:static-content:deploy . This is to avoid generated HTML referring to javascript/css that haven't been added to the list of compiled/minified assets which can break your store's front-end/admin panel.","title":"Integrating humm Manually"},{"location":"ecommerce/magento_2/#configuration","text":"Navigate to Stores -> Configuration -> Sales -> Payment Methods .","title":"Configuration"},{"location":"ecommerce/magento_2/#varnish-cache","text":"If your server utilises a Varnish cache it is important that you whitelist any URLs associated with the humm plugin. This should at least include the following: * YOUR_DOMAIN/HummPayments/payment/start/ * YOUR_DOMAIN/HummPayments/payment/cancel/ * YOUR_DOMAIN/HummPayments/payment/complete/ The endpoints listed here should also be whitelisted","title":"Varnish Cache"},{"location":"ecommerce/opencart/","text":"Integrating on OpenCart Skye is available for the following versions of OpenCart: 3.0.x Locate your Skye Credentials To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code Installation using Extension Installer The Extension Installer requires FTP settings to be configured. If it isn't, use manual installation instead. 1 - Download the latest extension for your OpenCart version here . 2 - From your OpenCart Admin , click Extensions > Installer . 3 - Click Upload then select the humm extension (ending with .ocmod.zip ). Next: Continue onto Finalising Installation below . Manual Installation 1 - Download the latest extension for your OpenCart version here . 2 - Unzip then copy contents of uploads folder into OpenCarts root folder. If upgrading humm , only humm files should be overwritten. Next: Continue onto Finalising Installation below . Finalising Installation 1 - Log into your OpenCart Admin then navigate to Extensions > Extensions . 2 - Select Payments from dropdown. 3 - Locate Skye then click Install . 4 - Click Edit on the right, this will open your Skye settings page. 5 - Ensure plugin is configured as below: Hovering on the will give details on what the fields are for. For testing, make sure Environment Sandbox is selected.","title":"OpenCart"},{"location":"ecommerce/opencart/#integrating-on-opencart","text":"Skye is available for the following versions of OpenCart: 3.0.x","title":"Integrating on OpenCart"},{"location":"ecommerce/opencart/#locate-your-skye-credentials","text":"To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code","title":"Locate your Skye Credentials"},{"location":"ecommerce/opencart/#installation-using-extension-installer","text":"The Extension Installer requires FTP settings to be configured. If it isn't, use manual installation instead. 1 - Download the latest extension for your OpenCart version here . 2 - From your OpenCart Admin , click Extensions > Installer . 3 - Click Upload then select the humm extension (ending with .ocmod.zip ). Next: Continue onto Finalising Installation below .","title":"Installation using Extension Installer"},{"location":"ecommerce/opencart/#manual-installation","text":"1 - Download the latest extension for your OpenCart version here . 2 - Unzip then copy contents of uploads folder into OpenCarts root folder. If upgrading humm , only humm files should be overwritten. Next: Continue onto Finalising Installation below .","title":"Manual Installation"},{"location":"ecommerce/opencart/#finalising-installation","text":"1 - Log into your OpenCart Admin then navigate to Extensions > Extensions . 2 - Select Payments from dropdown. 3 - Locate Skye then click Install . 4 - Click Edit on the right, this will open your Skye settings page. 5 - Ensure plugin is configured as below: Hovering on the will give details on what the fields are for. For testing, make sure Environment Sandbox is selected.","title":"Finalising Installation"},{"location":"ecommerce/prestashop/","text":"Setting up on PrestaShop Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Install the Plugin 1 - Download the humm plugin. PrestaShop 1.6: click here PrestaShop 1.7: click here 2 - In your store's admin area, click Modules and Services on the left. 4 - Click Add a new module in top-right. 5 - Click Choose a file , select the plugin, then click Upload this module . 7 - From Modules List at the bottom, click Install 8 - Then click Proceed with the Installation . Configuring humm 1 - In the Modules page, search for humm then click Configure . Setting Description Checkout Method Select humm Country AU or NZ Is Test? No Gateway URL Leave blank Updating the Plugin 1 - Navigate to Modules and Services . 2 - Find humm , then from the Configure drop-down select Delete > OK 4 - Install the new version of humm, see Installing the Plugin .","title":"Prestashop"},{"location":"ecommerce/prestashop/#setting-up-on-prestashop","text":"","title":"Setting up on PrestaShop"},{"location":"ecommerce/prestashop/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/prestashop/#install-the-plugin","text":"1 - Download the humm plugin. PrestaShop 1.6: click here PrestaShop 1.7: click here 2 - In your store's admin area, click Modules and Services on the left. 4 - Click Add a new module in top-right. 5 - Click Choose a file , select the plugin, then click Upload this module . 7 - From Modules List at the bottom, click Install 8 - Then click Proceed with the Installation .","title":"Install the Plugin"},{"location":"ecommerce/prestashop/#configuring-humm","text":"1 - In the Modules page, search for humm then click Configure . Setting Description Checkout Method Select humm Country AU or NZ Is Test? No Gateway URL Leave blank","title":"Configuring humm"},{"location":"ecommerce/prestashop/#updating-the-plugin","text":"1 - Navigate to Modules and Services . 2 - Find humm , then from the Configure drop-down select Delete > OK 4 - Install the new version of humm, see Installing the Plugin .","title":"Updating the Plugin"},{"location":"ecommerce/prestashop_quick_config_actions/","text":"Quick Config Actions PrestaShop allows you to perform quick actions on your installed modules such as disabling the plugin on specific devices or uninstalling it. Although not technically part of the Quick Config Actions sub-menu, you also have access to the Configure button. Clicking on it will take you to the Humm Configuration . Below is a summary of how to bring up the Quick Config Actions sub-menu: 1 - Log into your PrestaShop admin panel. 2 - Hover over the Modules and Services option on the left side menu, then click on the Modules and Services item on the sub-menu that appears. 3 - This will re-direct you to the List of Modules page. 4 - Scroll down until you bring the Modules List panel into focus and type Humm in the search field in the panel's top left corner. This will bring the humm module into focus and filter out all other modules. 5 - If you want to bring up the full Humm Configuration page, then click on the Configure button. 6 - Otherwise, clicking on the arrow next to the Configure button will open a drop-down menu similar to the one shown in the screenshot below. Here is a quick summary of the various Configure options available to you: Disable : Disables the plugin but leaves it installed on your PrestaShop. You can re-enable it with its existing settings at a later time. Humm will not appear as a payment option on your store once disabled. Disable on mobiles : This option disables humm only on mobile devices (or smartphones, such as iPhones). This does not apply to tablets (such as iPads) or desktop computers. Disable on tablets : Disables humm on tablets but not smartphones or desktop computers. Disable on computers : Disables humm on desktop computers only. Reset : Resets the humm module to its original state without any of the configuration settings that have been applied post installation. Uninstall : Uninstalls the plugin from your store. The plugin will still be available and you will be able to install it at a later time without having to upload it again. Mark as Favorite : Marks humm as one of your favourite plugins so that it becomes available from within the Favourites category list on the left hand side of the Modules List panel. Delete : Completely removes the plugin from your store. The plugin will no longer be available for installation again and the only way to add humm back to your store as a payment method would be to perform the instructions in the Installing humm section of the document again.","title":"Prestashop quick config actions"},{"location":"ecommerce/prestashop_quick_config_actions/#quick-config-actions","text":"PrestaShop allows you to perform quick actions on your installed modules such as disabling the plugin on specific devices or uninstalling it. Although not technically part of the Quick Config Actions sub-menu, you also have access to the Configure button. Clicking on it will take you to the Humm Configuration . Below is a summary of how to bring up the Quick Config Actions sub-menu: 1 - Log into your PrestaShop admin panel. 2 - Hover over the Modules and Services option on the left side menu, then click on the Modules and Services item on the sub-menu that appears. 3 - This will re-direct you to the List of Modules page. 4 - Scroll down until you bring the Modules List panel into focus and type Humm in the search field in the panel's top left corner. This will bring the humm module into focus and filter out all other modules. 5 - If you want to bring up the full Humm Configuration page, then click on the Configure button. 6 - Otherwise, clicking on the arrow next to the Configure button will open a drop-down menu similar to the one shown in the screenshot below. Here is a quick summary of the various Configure options available to you: Disable : Disables the plugin but leaves it installed on your PrestaShop. You can re-enable it with its existing settings at a later time. Humm will not appear as a payment option on your store once disabled. Disable on mobiles : This option disables humm only on mobile devices (or smartphones, such as iPhones). This does not apply to tablets (such as iPads) or desktop computers. Disable on tablets : Disables humm on tablets but not smartphones or desktop computers. Disable on computers : Disables humm on desktop computers only. Reset : Resets the humm module to its original state without any of the configuration settings that have been applied post installation. Uninstall : Uninstalls the plugin from your store. The plugin will still be available and you will be able to install it at a later time without having to upload it again. Mark as Favorite : Marks humm as one of your favourite plugins so that it becomes available from within the Favourites category list on the left hand side of the Modules List panel. Delete : Completely removes the plugin from your store. The plugin will no longer be available for installation again and the only way to add humm back to your store as a payment method would be to perform the instructions in the Installing humm section of the document again.","title":"Quick Config Actions"},{"location":"ecommerce/shopify/","text":"Integrating on Shopify Locate your humm Credentials To integrate humm you will need your Merchant Number API Key Integrating humm 1 \u2013 Email pit@%domain% with your merchant ID and mobile number for the humm Gateway Authorisation URL . 2 - Click on the link we send out, this will prompt you to login to your store. 3 - Once logged in, click Install payment provider . 4 - Confirmation will appear at bottom. 5 - In Alternative Payments , select Humm from the drop-down. 6 - Enter your Merchant Number and API Key then click Save . Price-info Widgets To add the Price-info widget as below, use Shopify instructions here . Price: $1000","title":"Shopify"},{"location":"ecommerce/shopify/#integrating-on-shopify","text":"","title":"Integrating on Shopify"},{"location":"ecommerce/shopify/#locate-your-humm-credentials","text":"To integrate humm you will need your Merchant Number API Key","title":"Locate your humm Credentials"},{"location":"ecommerce/shopify/#integrating-humm","text":"1 \u2013 Email pit@%domain% with your merchant ID and mobile number for the humm Gateway Authorisation URL . 2 - Click on the link we send out, this will prompt you to login to your store. 3 - Once logged in, click Install payment provider . 4 - Confirmation will appear at bottom. 5 - In Alternative Payments , select Humm from the drop-down. 6 - Enter your Merchant Number and API Key then click Save .","title":"Integrating humm"},{"location":"ecommerce/shopify/#price-info-widgets","text":"To add the Price-info widget as below, use Shopify instructions here . Price: $1000","title":"Price-info Widgets"},{"location":"ecommerce/vend/","text":"Setup on Vend To setup and configure humm with your Vend POS device you will need the following: Your Merchant ID A POS Device Token for each Vend Device Device Tokens can be generated in your humm Merchant Portal Login to the humm Merchant Portal Select the menu in the top right corner Select POS Device Tokens Select \"Generate\" and provide the number of registers you have allocated in Vend Setup Process Add a payment type Login to your Vend store. Go to Settings -> Payment Types -> Add Payment Type Create new \"Credit Card\" Payment Type Select: Payment Type = Credit Card Custom Name = humm Configure humm Payment Type On the Settings -> Payment Types screen, choose the humm Payment Type Set the Gateway URL to: https://vend.%domain% Press the \"Save Pament Type\" Pair a Register Humm requires each Vend register to be paired with humm before it can transact against the humm POS endpoint. In order to do this, you simply need to perform a test transaction from each Vend Register with-in your store. You will be prompted for your: Merchant ID Device Token. Your Merchant ID is provided in your Welcome Pack. Device Tokens can be generated in the humm Merchant Portal Complete Congratulations! Once a register is paired, your customers can now pay with humm","title":"Vend"},{"location":"ecommerce/vend/#setup-process","text":"","title":"Setup Process"},{"location":"ecommerce/vend/#add-a-payment-type","text":"Login to your Vend store. Go to Settings -> Payment Types -> Add Payment Type","title":"Add a payment type"},{"location":"ecommerce/vend/#create-new-credit-card-payment-type","text":"Select: Payment Type = Credit Card Custom Name = humm","title":"Create new \"Credit Card\" Payment Type"},{"location":"ecommerce/vend/#configure-humm-payment-type","text":"On the Settings -> Payment Types screen, choose the humm Payment Type Set the Gateway URL to: https://vend.%domain% Press the \"Save Pament Type\"","title":"Configure humm Payment Type"},{"location":"ecommerce/vend/#pair-a-register","text":"Humm requires each Vend register to be paired with humm before it can transact against the humm POS endpoint. In order to do this, you simply need to perform a test transaction from each Vend Register with-in your store. You will be prompted for your: Merchant ID Device Token. Your Merchant ID is provided in your Welcome Pack. Device Tokens can be generated in the humm Merchant Portal","title":"Pair a Register"},{"location":"ecommerce/vend/#complete","text":"Congratulations! Once a register is paired, your customers can now pay with humm","title":"Complete"},{"location":"ecommerce/woocommerce/","text":"Integrating on WooCommerce Locate your Skye Credentials To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code Integrating Skye 1 - Download the Skye Woocommerce plugin: here 2 - On the left-hand side of your WordPress admin page, click Plugins > Add New . 3 - Next click upload plugin 4 - Select downloaded .zip file. 5 - Click Install Now and Activate Plugin after plugin successfully installed. Configuration From the Plugins page, find Skye then click Payment Settings . Ensure Skye is configured as follows. Hovering on the will give details on what the fields are for. For testing, make sure Enable Sandbox Mode is checked.","title":"WooCommerce"},{"location":"ecommerce/woocommerce/#integrating-on-woocommerce","text":"","title":"Integrating on WooCommerce"},{"location":"ecommerce/woocommerce/#locate-your-skye-credentials","text":"To integrate Skye you will need your: Merchant Id Secret Key Operator Id Password Product Code","title":"Locate your Skye Credentials"},{"location":"ecommerce/woocommerce/#integrating-skye","text":"1 - Download the Skye Woocommerce plugin: here 2 - On the left-hand side of your WordPress admin page, click Plugins > Add New . 3 - Next click upload plugin 4 - Select downloaded .zip file. 5 - Click Install Now and Activate Plugin after plugin successfully installed.","title":"Integrating Skye"},{"location":"ecommerce/woocommerce/#configuration","text":"From the Plugins page, find Skye then click Payment Settings . Ensure Skye is configured as follows. Hovering on the will give details on what the fields are for. For testing, make sure Enable Sandbox Mode is checked.","title":"Configuration"},{"location":"widgets/banners/","text":"Banner Widgets Below are a list of banner widgets you may use to advertise humm on your website. See Generic Installation for more information on how to insert them. More Info Large <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large.js\"></script> More Info Large Slices <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large-slices.js\"></script> More Info Small <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small.js\"></script> More Info Small Slices <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small-slices.js\"></script> More Info Mini <script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-mini.js\"></script>","title":"Banner Widgets"},{"location":"widgets/banners/#banner-widgets","text":"Below are a list of banner widgets you may use to advertise humm on your website. See Generic Installation for more information on how to insert them.","title":"Banner Widgets"},{"location":"widgets/banners/#more-info-large","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large.js\"></script>","title":"More Info Large"},{"location":"widgets/banners/#more-info-large-slices","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-large-slices.js\"></script>","title":"More Info Large Slices"},{"location":"widgets/banners/#more-info-small","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small.js\"></script>","title":"More Info Small"},{"location":"widgets/banners/#more-info-small-slices","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-small-slices.js\"></script>","title":"More Info Small Slices"},{"location":"widgets/banners/#more-info-mini","text":"<script src=\"https://widgets.shophumm.com.au/content/scripts/more-info-mini.js\"></script>","title":"More Info Mini"},{"location":"widgets/calculator_widget/","text":"Calculator widget Calculator widgets provide a modal dialog calculator which can be used by the customer to further explore their options on paying. It basically works like the price info widget, except that the popup is a handy calculator. Types Calculator price widget This widget displays the computed monthly installment amount. Clicking on the tag opens a modal dialog calculator to further explore the options avaialble. Product price: 5000 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&mode=widget\"></script> Calculator button widgets These widget displays a button, which when clicked opens the modal dialog calculator. White outline This is the default setting. Works well on dark backgrounds. Product price: 4000 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button\"></script> Coloured outline Works well on light or transparent backgrounds. Product price: 4500 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button&buttonStyle=button-skye\"></script> Skye gradient Displays the button in Skye branding coulour Product price: 4600 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button&buttonStyle=button-gradient\"></script>","title":"Calculator Widget"},{"location":"widgets/calculator_widget/#calculator-widget","text":"Calculator widgets provide a modal dialog calculator which can be used by the customer to further explore their options on paying. It basically works like the price info widget, except that the popup is a handy calculator.","title":"Calculator widget"},{"location":"widgets/calculator_widget/#types","text":"","title":"Types"},{"location":"widgets/calculator_widget/#calculator-price-widget","text":"This widget displays the computed monthly installment amount. Clicking on the tag opens a modal dialog calculator to further explore the options avaialble. Product price: 5000 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&mode=widget\"></script>","title":"Calculator price widget"},{"location":"widgets/calculator_widget/#calculator-button-widgets","text":"These widget displays a button, which when clicked opens the modal dialog calculator.","title":"Calculator button widgets"},{"location":"widgets/calculator_widget/#white-outline","text":"This is the default setting. Works well on dark backgrounds. Product price: 4000 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button\"></script>","title":"White outline"},{"location":"widgets/calculator_widget/#coloured-outline","text":"Works well on light or transparent backgrounds. Product price: 4500 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button&buttonStyle=button-skye\"></script>","title":"Coloured outline"},{"location":"widgets/calculator_widget/#skye-gradient","text":"Displays the button in Skye branding coulour Product price: 4600 Calculate <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-calc.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=button&buttonStyle=button-gradient\"></script>","title":"Skye gradient"},{"location":"widgets/installation/","text":"Price-info Widget Setup on your Website Step 1: Choose the widget that you want to install from: Price-info Widget Step 2: Place the <script> tag in the desired place you'd like it to appear on your website. Step 3: Save and you should see a working widget on your website. Working Example","title":"Generic Installation"},{"location":"widgets/installation/#price-info-widget-setup-on-your-website","text":"Step 1: Choose the widget that you want to install from: Price-info Widget Step 2: Place the <script> tag in the desired place you'd like it to appear on your website. Step 3: Save and you should see a working widget on your website.","title":"Price-info Widget Setup on your Website"},{"location":"widgets/installation/#working-example","text":"","title":"Working Example"},{"location":"widgets/landing_widget/","text":"Landing Page Widget You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Simply insert the following script tag into a blank page on your website and the following widget will display. <script id=\"humm-landing-page\" src=\"https://widgets.%domain%/content/scripts/landing-page.js\"></script>","title":"Landing widget"},{"location":"widgets/landing_widget/#landing-page-widget","text":"You may set up a dedicated landing page for your buyers to provide them with all the information about the humm service. Simply insert the following script tag into a blank page on your website and the following widget will display. <script id=\"humm-landing-page\" src=\"https://widgets.%domain%/content/scripts/landing-page.js\"></script>","title":"Landing Page Widget"},{"location":"widgets/price_info/","text":"Price-info widget What is a widget? A widget is a tag that will open a modal (a.k.a popup) when clicked. The content of the modal dialog provides additional information to the customer. How to use To configure the widgets, simply copy the .. tags below to your html content where you want them to appear and populate the highlighted fields (id, productPrice..etc.) with the correct values. Contact pit@%domain% if you're unsure what type of merchant you are. Insert the script where you want the price-info widget to display replacing PLACE_YOUR_PRODUCT_PRICE with the product price. Platform-specific Instructions Shopify Magetno 1 OpenCart 3 Skye price-info widgets Default widget This widget displays the computed monthly installment amount. The installment term used for computation is the longest term configured for the merchant in relation to the PRODUCT_PRICE provided. Example: An amount of 2400 would automatically default to an 18 month term. Product price: 2400 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE\"></script> Fixed term widget This widget displays the computed installment amount against the provided term. This is ideal for promoting specific installment terms. Example: An amount of 2500 would automatically default to an 18 month term. If merchant wants to promote 6 month terms, merchant just needs to supply the specific TERM to the script. Product price: 2500 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&term=TERM\"></script> Weekly widget This widget displays the computed weekly installment amount. Product price: 700 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=weekly\"></script> Widget features 1. Dynamically get product price Instead of passing in a fixed productPrice value, you can provide a price-selector query argument to target the HTML element containing the product price. Here, the price-info widget will get the product price from the specified element, and dynamically update when the price is changed. If product price dynamically updateson user selection, or you have multiple products on the same page, the price-info widget can dynamically get the product price from a specified HTML element in the page. With this feature, you can provide a URL encoded jQuery style CSS selector and it will bind a call back to the DOMSubTreeModified event. If the price is modified, it will update the payment info accordingly. For example, this is a block of HTML extracted from a typical WooCommerce product page: <span>Product Price:</span> <p class=\"price\"> <span id=\"priceinfo\" class=\"woocommerce-Price-amount amount\"> <span class=\"woocommerce-Price-currencySymbol\">$</span>900.00 </span> </p> Product Price : $ 900.00 In this case, we use the urlencoded %23priceinfo to refer to the id #priceinfo <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&mode=weekly\"></script> You could also use price-selector=.woocommerce-Price-amount.amount or any CSS selectors to help identify the price element. 2. Minimum and Maximum (Optional) You may set the minimum and maximum prices the widget will display for by setting the data-min and data-max when calling the widget. <script data-min=\"20\" data-max=\"300\" src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=YOUR_PRICE\"></script> Here it will not display for prices above $300 or will display in an altered form for prices below $20. *We reserve the right to change any linked image at anytime without prior notice","title":"Price-info Widget"},{"location":"widgets/price_info/#price-info-widget","text":"","title":"Price-info widget"},{"location":"widgets/price_info/#what-is-a-widget","text":"A widget is a tag that will open a modal (a.k.a popup) when clicked. The content of the modal dialog provides additional information to the customer.","title":"What is a widget?"},{"location":"widgets/price_info/#how-to-use","text":"To configure the widgets, simply copy the .. tags below to your html content where you want them to appear and populate the highlighted fields (id, productPrice..etc.) with the correct values. Contact pit@%domain% if you're unsure what type of merchant you are. Insert the script where you want the price-info widget to display replacing PLACE_YOUR_PRODUCT_PRICE with the product price.","title":"How to use"},{"location":"widgets/price_info/#platform-specific-instructions","text":"Shopify Magetno 1 OpenCart 3","title":"Platform-specific Instructions"},{"location":"widgets/price_info/#skye-price-info-widgets","text":"","title":"Skye price-info widgets"},{"location":"widgets/price_info/#default-widget","text":"This widget displays the computed monthly installment amount. The installment term used for computation is the longest term configured for the merchant in relation to the PRODUCT_PRICE provided. Example: An amount of 2400 would automatically default to an 18 month term. Product price: 2400 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE\"></script>","title":"Default widget"},{"location":"widgets/price_info/#fixed-term-widget","text":"This widget displays the computed installment amount against the provided term. This is ideal for promoting specific installment terms. Example: An amount of 2500 would automatically default to an 18 month term. If merchant wants to promote 6 month terms, merchant just needs to supply the specific TERM to the script. Product price: 2500 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&term=TERM\"></script>","title":"Fixed term widget"},{"location":"widgets/price_info/#weekly-widget","text":"This widget displays the computed weekly installment amount. Product price: 700 <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&productPrice=PRODUCT_PRICE&mode=weekly\"></script>","title":"Weekly widget"},{"location":"widgets/price_info/#widget-features","text":"","title":"Widget features"},{"location":"widgets/price_info/#1-dynamically-get-product-price","text":"Instead of passing in a fixed productPrice value, you can provide a price-selector query argument to target the HTML element containing the product price. Here, the price-info widget will get the product price from the specified element, and dynamically update when the price is changed. If product price dynamically updateson user selection, or you have multiple products on the same page, the price-info widget can dynamically get the product price from a specified HTML element in the page. With this feature, you can provide a URL encoded jQuery style CSS selector and it will bind a call back to the DOMSubTreeModified event. If the price is modified, it will update the payment info accordingly. For example, this is a block of HTML extracted from a typical WooCommerce product page: <span>Product Price:</span> <p class=\"price\"> <span id=\"priceinfo\" class=\"woocommerce-Price-amount amount\"> <span class=\"woocommerce-Price-currencySymbol\">$</span>900.00 </span> </p> Product Price : $ 900.00 In this case, we use the urlencoded %23priceinfo to refer to the id #priceinfo <script id=\"skye-widget\"src=\"https://d1y94doel0eh42.cloudfront.net/content/scripts/skye-widget.js?id=MERCHANT_CODE&price-selector=CSS_SELECTOR_URL_ENCODED&mode=weekly\"></script> You could also use price-selector=.woocommerce-Price-amount.amount or any CSS selectors to help identify the price element.","title":"1. Dynamically get product price"},{"location":"widgets/price_info/#2-minimum-and-maximum-optional","text":"You may set the minimum and maximum prices the widget will display for by setting the data-min and data-max when calling the widget. <script data-min=\"20\" data-max=\"300\" src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=YOUR_PRICE\"></script> Here it will not display for prices above $300 or will display in an altered form for prices below $20. *We reserve the right to change any linked image at anytime without prior notice","title":"2. Minimum and Maximum (Optional)"},{"location":"widgets/price-info/magento_1/","text":"Price-info Widgets on Shopify For adding Price-info Widget to your Magento 1 Website, follow these instructions Step 1: Find view.phtml from the following location in your hosting (Magento installed Folder) and open it with your desired text-editor YOUR_MAGENTO_FOLDER/app/design/frontend/rwd/YOUR_TEMPLATE_FOLDER/template/catalog/product/view.phtml Step 2: Find \"getPriceHtml\" There should be only one occurrence of the \"getPriceHtml\" string, and it may look similar to: <?php echo $this->getPriceHtml($_product); ?> Step 3: Place the following <script> tag below the \"getPriceHtml\" code. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>\"></script> You may try inserting the code a few lines below the \"getPriceHtml\" code, or below some other elements. Try different places and view the visual appearance to find the most suitable place for your site. You may need to flush cache for the changes to take effect. Step 4: Save and you should see a working widget on your website.","title":"On Magento 1"},{"location":"widgets/price-info/magento_1/#price-info-widgets-on-shopify","text":"For adding Price-info Widget to your Magento 1 Website, follow these instructions Step 1: Find view.phtml from the following location in your hosting (Magento installed Folder) and open it with your desired text-editor YOUR_MAGENTO_FOLDER/app/design/frontend/rwd/YOUR_TEMPLATE_FOLDER/template/catalog/product/view.phtml Step 2: Find \"getPriceHtml\" There should be only one occurrence of the \"getPriceHtml\" string, and it may look similar to: <?php echo $this->getPriceHtml($_product); ?> Step 3: Place the following <script> tag below the \"getPriceHtml\" code.","title":"Price-info Widgets on Shopify"},{"location":"widgets/price-info/magento_1/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/magento_1/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/magento_1/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice=<?php echo $_product->getFinalPrice(); ?>\"></script> You may try inserting the code a few lines below the \"getPriceHtml\" code, or below some other elements. Try different places and view the visual appearance to find the most suitable place for your site. You may need to flush cache for the changes to take effect. Step 4: Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"},{"location":"widgets/price-info/opencart_3/","text":"Price-info Widgets on OpenCart 3 Step 1: Open the product.twig file in the following location on your server YOUR_OPENCART_DIR/catalog/view/theme/YOUR_THEME/template/product/product.twig Step 2: Find the product price section Within the product.twig file, find the section of code where the price is displayed. Below is an excerpt from the product.twig found in the default theme. Your theme may be different. Note that you would place the widget in the section marked INSERT_WIDGET_HERE {% if price %} <ul class=\"list-unstyled\"> {% if not special %} <li> <h2>{{ price }}</h2> </li> {% else %} <li><span style=\"text-decoration: line-through;\">{{ price }}</span></li> <li> <h2>{{ special }}</h2> </li> {% endif %} INSERT_WIDGET_HERE {% if tax %} <li>{{ text_tax }} {{ tax }}</li> {% endif %} {% if points %} <li>{{ text_points }} {{ points }}</li> {% endif %} {% if discounts %} <li> <hr> </li> {% for discount in discounts %} <li>{{ discount.quantity }}{{ text_discount }}{{ discount.price }}</li> {% endfor %} {% endif %} </ul> {% endif %} Step 3: Place the following <script> tag into the product.twig file. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}\"></script> Try inserting the widget in different places in the code until you find the most suitable place for your site. Step 4: Save and you should see a working widget on your website.","title":"On OpenCart 3"},{"location":"widgets/price-info/opencart_3/#price-info-widgets-on-opencart-3","text":"Step 1: Open the product.twig file in the following location on your server YOUR_OPENCART_DIR/catalog/view/theme/YOUR_THEME/template/product/product.twig Step 2: Find the product price section Within the product.twig file, find the section of code where the price is displayed. Below is an excerpt from the product.twig found in the default theme. Your theme may be different. Note that you would place the widget in the section marked INSERT_WIDGET_HERE {% if price %} <ul class=\"list-unstyled\"> {% if not special %} <li> <h2>{{ price }}</h2> </li> {% else %} <li><span style=\"text-decoration: line-through;\">{{ price }}</span></li> <li> <h2>{{ special }}</h2> </li> {% endif %} INSERT_WIDGET_HERE {% if tax %} <li>{{ text_tax }} {{ tax }}</li> {% endif %} {% if points %} <li>{{ text_points }} {{ points }}</li> {% endif %} {% if discounts %} <li> <hr> </li> {% for discount in discounts %} <li>{{ discount.quantity }}{{ text_discount }}{{ discount.price }}</li> {% endfor %} {% endif %} </ul> {% endif %} Step 3: Place the following <script> tag into the product.twig file.","title":"Price-info Widgets on OpenCart 3"},{"location":"widgets/price-info/opencart_3/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/opencart_3/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/opencart_3/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={%if special%}{{special}}{%else%}{{price}}{%endif%}\"></script> Try inserting the widget in different places in the code until you find the most suitable place for your site. Step 4: Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"},{"location":"widgets/price-info/shopify/","text":"Price-info Widgets on Shopify 1 - From the Shopify Dashboard, navigate to Online Store > Themes > Actions > Edit Code . 2 - From left panel, navigate to Sections then select product-template.liquid . If the \"product-template.liquid\" file does not exist , navigate to Templates and select product.liquid instead. 3 - Place the <script> tag in the desired place you'd like it to appear on your website, typically this is before. This should be added before Add to Cart button tag. 'Little things' only Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&LittleOnly\"></script> 'Big things' only Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&BigOnly\"></script> Both 'Little things' and 'Big things' Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}\"></script> 4 - Save and you should see a working widget on your website.","title":"On Shopify"},{"location":"widgets/price-info/shopify/#price-info-widgets-on-shopify","text":"1 - From the Shopify Dashboard, navigate to Online Store > Themes > Actions > Edit Code . 2 - From left panel, navigate to Sections then select product-template.liquid . If the \"product-template.liquid\" file does not exist , navigate to Templates and select product.liquid instead. 3 - Place the <script> tag in the desired place you'd like it to appear on your website, typically this is before. This should be added before Add to Cart button tag.","title":"Price-info Widgets on Shopify"},{"location":"widgets/price-info/shopify/#little-things-only","text":"Using the following code if you are a 'Little things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&LittleOnly\"></script>","title":"'Little things' only"},{"location":"widgets/price-info/shopify/#big-things-only","text":"Using the following code if you are a 'Big things' only merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}&BigOnly\"></script>","title":"'Big things' only"},{"location":"widgets/price-info/shopify/#both-little-things-and-big-things","text":"Using the following code if you are both a 'Little things' and 'Big things' merchant. <script src=\"https://widgets.%domain%/content/scripts/price-info.js?productPrice={{product.selected_or_first_available_variant.price | divided_by: 100.00}}\"></script> 4 - Save and you should see a working widget on your website.","title":"Both 'Little things' and 'Big things'"}]}